// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/Bit.hdl
/**
 * 1-bit register:
 * If load is asserted, the register's value is set to in;
 * Otherwise, the register maintains its current value:
 * if (load(t)) out(t+1) = in(t), else out(t+1) = out(t)
 */
CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    Mux(a=pin2, b=in, sel=load, out=pin1);
    DFF(in=pin1, out=pin2);
    Or(a=pin2, b=false, out=out);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/Register.hdl
/**
 * 16-bit register:
 * If load is asserted, the register's value is set to in;
 * Otherwise, the register maintains its current value:
 * if (load(t)) out(t+1) = int(t), else out(t+1) = out(t)
 */
CHIP Register {
    IN in[16], load;
    OUT out[16];

    PARTS:
    Bit(in=in[0], load=load, out=out[0]);
    Bit(in=in[1], load=load, out=out[1]);
    Bit(in=in[2], load=load, out=out[2]);
    Bit(in=in[3], load=load, out=out[3]);
    Bit(in=in[4], load=load, out=out[4]);
    Bit(in=in[5], load=load, out=out[5]);
    Bit(in=in[6], load=load, out=out[6]);
    Bit(in=in[7], load=load, out=out[7]);
    Bit(in=in[8], load=load, out=out[8]);
    Bit(in=in[9], load=load, out=out[9]);
    Bit(in=in[10], load=load, out=out[10]);
    Bit(in=in[11], load=load, out=out[11]);
    Bit(in=in[12], load=load, out=out[12]);
    Bit(in=in[13], load=load, out=out[13]);
    Bit(in=in[14], load=load, out=out[14]);
    Bit(in=in[15], load=load, out=out[15]);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM8.hdl
/**
 * Memory of eight 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address, a=pin1, b=pin2, c=pin3, d=pin4, e=pin5, f=pin6, g=pin7, h=pin8);
    Register(in=in, load=pin1, out=pin9);
    Register(in=in, load=pin2, out=pin10);
    Register(in=in, load=pin3, out=pin11);
    Register(in=in, load=pin4, out=pin12);
    Register(in=in, load=pin5, out=pin13);
    Register(in=in, load=pin6, out=pin14);
    Register(in=in, load=pin7, out=pin15);
    Register(in=in, load=pin8, out=pin16);
    Mux8Way16(a=pin9, b=pin10, c=pin11, d=pin12, e=pin13, f=pin14, g=pin15, h=pin16, sel=address, out=out);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=pin1, b=pin2, c=pin3, d=pin4, e=pin5, f=pin6, g=pin7, h=pin8);
    RAM8(in=in, load=pin1, address=address[0..2], out=pin9);
    RAM8(in=in, load=pin2, address=address[0..2], out=pin10);
    RAM8(in=in, load=pin3, address=address[0..2], out=pin11);
    RAM8(in=in, load=pin4, address=address[0..2], out=pin12);
    RAM8(in=in, load=pin5, address=address[0..2], out=pin13);
    RAM8(in=in, load=pin6, address=address[0..2], out=pin14);
    RAM8(in=in, load=pin7, address=address[0..2], out=pin15);
    RAM8(in=in, load=pin8, address=address[0..2], out=pin16);
    Mux8Way16(a=pin9, b=pin10, c=pin11, d=pin12, e=pin13, f=pin14, g=pin15, h=pin16, sel=address[3..5], out=out);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM512.hdl
/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[6..8], a=pin1, b=pin2, c=pin3, d=pin4, e=pin5, f=pin6, g=pin7, h=pin8);
    RAM64(in=in, load=pin1, address=address[0..5], out=pin9);
    RAM64(in=in, load=pin2, address=address[0..5], out=pin10);
    RAM64(in=in, load=pin3, address=address[0..5], out=pin11);
    RAM64(in=in, load=pin4, address=address[0..5], out=pin12);
    RAM64(in=in, load=pin5, address=address[0..5], out=pin13);
    RAM64(in=in, load=pin6, address=address[0..5], out=pin14);
    RAM64(in=in, load=pin7, address=address[0..5], out=pin15);
    RAM64(in=in, load=pin8, address=address[0..5], out=pin16);
    Mux8Way16(a=pin9, b=pin10, c=pin11, d=pin12, e=pin13, f=pin14, g=pin15, h=pin16, sel=address[6..8], out=out);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM4K.hdl
/**
 * Memory of 4K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[9..11], a=pin1, b=pin2, c=pin3, d=pin4, e=pin5, f=pin6, g=pin7, h=pin8);
    RAM512(in=in, load=pin1, address=address[0..8], out=pin9);
    RAM512(in=in, load=pin2, address=address[0..8], out=pin10);
    RAM512(in=in, load=pin3, address=address[0..8], out=pin11);
    RAM512(in=in, load=pin4, address=address[0..8], out=pin12);
    RAM512(in=in, load=pin5, address=address[0..8], out=pin13);
    RAM512(in=in, load=pin6, address=address[0..8], out=pin14);
    RAM512(in=in, load=pin7, address=address[0..8], out=pin15);
    RAM512(in=in, load=pin8, address=address[0..8], out=pin16);
    Mux8Way16(a=pin9, b=pin10, c=pin11, d=pin12, e=pin13, f=pin14, g=pin15, h=pin16, sel=address[9..11], out=out);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM16K.hdl
/**
 * Memory of 16K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    DMux4Way(in=load, sel=address[12..13], a=pin1, b=pin2, c=pin3, d=pin4);
    RAM4K(in=in, load=pin1, address=address[0..11], out=pin5);
    RAM4K(in=in, load=pin2, address=address[0..11], out=pin6);
    RAM4K(in=in, load=pin3, address=address[0..11], out=pin7);
    RAM4K(in=in, load=pin4, address=address[0..11], out=pin8);
    Mux4Way16(a=pin5, b=pin6, c=pin7, d=pin8, sel=address[12..13], out=out);
}
～～～～～～～～～～～～～～～～～～～
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16],inc, load, reset;
    OUT out[16];
    
    PARTS:
    Register(in=pin5, load=true, out=pin1);
    Inc16(in=pin1, out=pin2);
    Mux16(a=pin1, b=pin2, sel=inc, out=pin3);
    Mux16(a=pin3, b=in, sel=load, out=pin4);
    Mux16(a=pin4, b[0..15]=false, sel=reset, out=pin5);
    Or16(a=pin1, b=false, out=out);
}
