HalfAdder
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/HalfAdder.hdl
/**
 * Computes the sum of two bits.
 */
CHIP HalfAdder {
    IN a, b;    // 1-bit inputs
    OUT sum,    // Right bit of a + b 
        carry;  // Left bit of a + b

    PARTS:
    And(a=a, b=b, out=carry);
    Xor(a=a, b=b, out=sum);
}
～～～～～～～～～～～～～～～～～～～
FullAdder
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/FullAdder.hdl
/**
 * Computes the sum of three bits.
 */
CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    HalfAdder(a=a, b=b, sum=pin1, carry=pin2);
    HalfAdder(a=pin1, b=c, sum=sum, carry=pin3);
    Or(a=pin2, b=pin3, out=carry);
}
～～～～～～～～～～～～～～～～～～～
Add16
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/Add16.hdl
/**
 * 16-bit adder: Adds two 16-bit two's complement values.
 * The most significant carry bit is ignored.
 */
CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    HalfAdder(a=a[0], b=b[0], sum=out[0], carry=pin1);
    FullAdder(a=a[1], b=b[1], c=pin1, sum=out[1], carry=pin2);
    FullAdder(a=a[2], b=b[2], c=pin2, sum=out[2], carry=pin3);
    FullAdder(a=a[3], b=b[3], c=pin3, sum=out[3], carry=pin4);
    FullAdder(a=a[4], b=b[4], c=pin4, sum=out[4], carry=pin5);
    FullAdder(a=a[5], b=b[5], c=pin5, sum=out[5], carry=pin6);
    FullAdder(a=a[6], b=b[6], c=pin6, sum=out[6], carry=pin7);
    FullAdder(a=a[7], b=b[7], c=pin7, sum=out[7], carry=pin8);
    FullAdder(a=a[8], b=b[8], c=pin8, sum=out[8], carry=pin9);
    FullAdder(a=a[9], b=b[9], c=pin9, sum=out[9], carry=pin10);
    FullAdder(a=a[10], b=b[10], c=pin10, sum=out[10], carry=pin11);
    FullAdder(a=a[11], b=b[11], c=pin11, sum=out[11], carry=pin12);
    FullAdder(a=a[12], b=b[12], c=pin12, sum=out[12], carry=pin13);
    FullAdder(a=a[13], b=b[13], c=pin13, sum=out[13], carry=pin14);
    FullAdder(a=a[14], b=b[14], c=pin14, sum=out[14], carry=pin15);
    FullAdder(a=a[15], b=b[15], c=pin15, sum=out[15], carry=carry);
}
～～～～～～～～～～～～～～～～～～～
Inc16
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/Inc16.hdl
/**
 * 16-bit incrementer:
 * out = in + 1
 */
CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
    Add16(
        a=in, 
        b[0]=true,
        b[1]=false,
        b[2]=false,
        b[3]=false,
        b[4]=false,
        b[5]=false,
        b[6]=false,
        b[7]=false,
        b[8]=false,
        b[9]=false,
        b[10]=false,
        b[11]=false,
        b[12]=false,
        b[13]=false,
        b[14]=false,
        b[15]=false,
        out=out
    );
}
～～～～～～～～～～～～～～～～～～～
Or16Way

CHIP Or16Way {
    IN  in[16];
    OUT out;

    PARTS:
    Or8Way(
        in[0]=in[0],
        in[1]=in[1],
        in[2]=in[2],
        in[3]=in[3],
        in[4]=in[4],
        in[5]=in[5],
        in[6]=in[6],
        in[7]=in[7],
        out=pin1);
    Or8Way(
        in[0]=in[8],
        in[1]=in[9],
        in[2]=in[10],
        in[3]=in[11],
        in[4]=in[12],
        in[5]=in[13],
        in[6]=in[14],
        in[7]=in[15],
        out=pin2);
    Or(a=pin1, b=pin2, out=out);
}
～～～～～～～～～～～～～～～～～～～
ALU
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Mux16(a=x,
          b[0]=false,
          b[1]=false,
          b[2]=false,
          b[3]=false,
          b[4]=false,
          b[5]=false,
          b[6]=false,
          b[7]=false,
          b[8]=false,
          b[9]=false,
          b[10]=false,
          b[11]=false,
          b[12]=false,
          b[13]=false,
          b[14]=false,
          b[15]=false,
          sel=zx, out=pin1);
    Not16(in=pin1, out=pin2);
    Mux16(a=pin1, b=pin2, sel=nx, out=pin3);

    Mux16(a=y,
          b[0]=false,
          b[1]=false,
          b[2]=false,
          b[3]=false,
          b[4]=false,
          b[5]=false,
          b[6]=false,
          b[7]=false,
          b[8]=false,
          b[9]=false,
          b[10]=false,
          b[11]=false,
          b[12]=false,
          b[13]=false,
          b[14]=false,
          b[15]=false,
          sel=zy, out=pin4);
    Not16(in=pin4, out=pin5);
    Mux16(a=pin4, b=pin5, sel=ny, out=pin6);

    And16(a=pin3, b=pin6, out=pin7);
    Add16(a=pin3, b=pin6, out=pin8);
    Mux16(a=pin7, b=pin8, sel=f, out=pin9);

    Not16(in=pin9, out=pin10);
    Mux16(a=pin9, b=pin10, sel=no, out=pin11); 

    Or16Way(in=pin11, out=pin12);
    Not(in=pin12, out=zr);

    And16(a=pin11,
          b[0]=false,
          b[1]=false,
          b[2]=false,
          b[3]=false,
          b[4]=false,
          b[5]=false,
          b[6]=false,
          b[7]=false,
          b[8]=false,
          b[9]=false,
          b[10]=false,
          b[11]=false,
          b[12]=false,
          b[13]=false,
          b[14]=false,
          b[15]=true,
          out=pin13);
    Or16Way(in=pin13, out=ng);

    Mux16(a=pin11, b=pin11, sel=false, out=out);
}